# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Morales Robot - Operations CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
    test:
      runs-on: ubuntu-latest

      steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Start containers
        run: docker-compose -f "docker-compose.yml" up -d --build

      - name: Test with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: build test

    build:
      needs: test
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v3

        - name: Set up JDK 17
          uses: actions/setup-java@v3
          with:
            java-version: '17'
            distribution: 'temurin'

        - name: Change wrapper permissions
          run: chmod +x ./gradlew

        - name: Build with Gradle
          uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
          with:
            arguments: build -x test

    deploy:
      needs: build
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v3

        - name: Deploy in Railway
          run: echo Hi, mr Morales this step is under development, sorry.

    release:
      needs: deploy
      runs-on: ubuntu-latest

      steps:
        - uses: paulhatch/semantic-version@v5.0.2
          with:
            tag_prefix: "v"
            major_pattern: "(MAJOR)"
            major_regexp_flags: ""
            minor_pattern: "(MINOR)"
            minor_regexp_flags: ""
            version_format: "${major}.${minor}.${patch}-prerelease${increment}"
            # Optional path to check for changes. If any changes are detected in the path the
            # 'changed' output will true. Enter multiple paths separated by spaces.
            change_path: "src/main"
            # Named version, will be used as suffix for name version tag
            namespace: dojo
            # If this is set to true, *every* commit will be treated as a new version.
            bump_each_commit: true
            # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
            search_commit_body: false
            # The output method used to generate list of users, 'csv' or 'json'.
            enable_prerelease_mode: true
